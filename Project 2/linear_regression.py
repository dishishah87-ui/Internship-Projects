# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dmNxp6MjDuQwCp9FdZozjwFgKWibIwV

**Import Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""**Import Data**"""

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("advertising.csv")

"""# **EDA**"""

print(df.shape)

print(df.head())

print(df.info())

print(df.describe())

"""**Independent And Dependent Variable**"""

Y=df['Sales'].values
X=df[['TV','Radio','Newspaper']].values

"""# **Visual EDA**"""

plt.scatter(df['TV'], df['Sales'], color='red', label='TV')
plt.scatter(df['Radio'], df['Sales'], color='blue', label='Radio')
plt.scatter(df['Newspaper'], df['Sales'], color='green', label='Newspaper')
plt.xlabel('Advertising Spend')
plt.ylabel('Sales')
plt.legend(loc=4)
plt.show()

print(X.shape)
print(Y.shape)

"""# **Train Test Split**"""

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.30,random_state=42)

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

"""# **Mechanics Of Model**"""

from sklearn.linear_model import LinearRegression
lm=LinearRegression()
lm.fit(X_train,Y_train)
Y_pred=lm.predict(X_test)

a=lm.coef_
b=lm.intercept_
print(a)
print(b)

'''TV:y=0.05358869*x+4.743766701589685
Radio:y=0.10270677*x+4.743766701589685
Newspaper:y=0.00793167*x+4.743766701589685'''

lm.predict(X_test)[0:5]

pred_train=lm.predict(X_train[0:5])
print(pred_train)

"""# **Regression Metrics**"""

print("Y_test shape:", Y_test.shape)
print("Y_pred shape:", Y_pred.shape)

print("X_test shape:", X_test.shape)
print("Y_test shape:", Y_test.shape)
print("Length of Y_pred:", len(Y_pred))

from sklearn.metrics import mean_squared_error
Y_test=np.ravel(Y_test)
Y_pred=np.ravel(Y_pred)
mse=mean_squared_error(Y_test, Y_pred)
rmse=np.sqrt(mse)
print("RMSE Value: {:.4f}".format(rmse))

from sklearn.metrics import r2_score
print("r2 Score: {:.4f}".format(r2_score(Y_test,Y_pred)))

"""# **Interpretation**"""

plt.figure(figsize=(20,10))
# TV vs Sales
plt.subplot(1,3,1)
plt.scatter(df['TV'],df['Sales'],color='blue',label='Actual')
plt.plot(X_test[:,0],Y_pred,color='red',linewidth=2,label='Predicted')
plt.xlabel('TV Spend')
plt.ylabel('Sales')
plt.title('TV vs Sales')
plt.legend()

# Radio vs Sales
plt.subplot(1,3,2)
plt.scatter(df['Radio'],df['Sales'],color='blue',label='Actual')
plt.plot(X_test[:,1],Y_pred,color='red',linewidth=2,label='Predicted')
plt.xlabel('Radio Spend')
plt.ylabel('Sales')
plt.title('Radio vs Sales')
plt.legend()

# Newspaper vs Sales
plt.subplot(1,3,3)
plt.scatter(df['Newspaper'],df['Sales'],color='blue',label='Actual')
plt.plot(X_test[:,2],Y_pred,color='red',linewidth=2,label='Predicted')
plt.xlabel('Newspaper Spend')
plt.ylabel('Sales')
plt.title('Newspaper vs Sales')
plt.legend()
plt.tight_layout()
plt.show()

"""**Overfitting and underfitting**"""

print("Training set score:{:.4f}".format(lm.score(X_train,Y_train)))
print("Test set score:{:.4f}".format(lm.score(X_test,Y_test)))

import joblib
joblib.dump(lm,'lm_regressor.pkl')