# -*- coding: utf-8 -*-
"""Random Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DeV5YSZXG1RU8uout4vrWjr3DNLFX5uR

# **Import Library and dataset**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("insurance.csv")

import warnings
warnings.filterwarnings('ignore')

"""# **EDA**"""

df.head()

df.shape

df.info()

df.describe()

df.isnull().sum()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['age']=le.fit_transform(df['age'])
df['sex']=le.fit_transform(df['sex'])
df['bmi']=le.fit_transform(df['bmi'])
df['children']=le.fit_transform(df['children'])
df['smoker']=le.fit_transform(df['smoker'])
df['region']=le.fit_transform(df['region'])
df['charges']=le.fit_transform(df['charges'])
df.head()

plt.figure()
sns.boxplot(data=df)
plt.title("Before outlier treatment")
plt.show()

for column in df.columns:
    plt.figure(figsize=(8, 4))
    sns.displot(df[column], bins=20, kde=True)
    plt.title(f"Distribution of {column}")
    plt.show()

sns.pairplot(df)
plt.show()

plt.figure(figsize=(10,6))
sns.heatmap(df.corr(), annot=True, cmap="Greens")
plt.show()

x=df.drop('charges',axis=1)
y=df['charges']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)

from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
param_grid={
    'n_estimators': [10, 50, 100, 200, 300],
    'criterion': ['squared_error', 'absolute_error']
}
rf=RandomForestRegressor(random_state=42)
grid_search=GridSearchCV(estimator=rf, param_grid=param_grid, cv=5)
grid_search.fit(x_train, y_train)
print("Best Parameters:", grid_search.best_params_)
print("Best Score:", grid_search.best_score_)

grid_search.best_params_

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor(n_estimators=100,criterion="squared_error")
rf.fit(x_train,y_train)

y_pred=rf.predict(x_test)
y_pred

rf.score(x_train,y_train)

rf.score(x_test,y_test)

"""# **ROC**"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
y_pred=rf.predict(x_test)
r2=r2_score(y_test, y_pred)
mae=mean_absolute_error(y_test, y_pred)
rmse=np.sqrt(mean_squared_error(y_test, y_pred))
print("RÂ² Score:", r2)
print("MAE:", mae)
print("RMSE:", rmse)

y_pred=rf.predict(x_test)
plt.figure(figsize=(6,6))
plt.scatter(y_test, y_pred, color='blue', alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)
plt.xlabel("Actual Charges")
plt.ylabel("Predicted Charges")
plt.title("Actual vs Predicted Charges (Regression)")
plt.show()

"""# **Confusion Matrix**"""

import pandas as pd
from sklearn.metrics import confusion_matrix
bins=[0, 10000, 20000, 100000]
labels=['Low', 'Medium', 'High']
y_test_cat=pd.cut(y_test, bins=bins, labels=labels)
y_pred_cat=pd.cut(y_pred, bins=bins, labels=labels)
cm=confusion_matrix(y_test_cat, y_pred_cat)
print(cm)

sns.heatmap(cm,annot=True,fmt="d")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

from sklearn.metrics import classification_report
bins=[0, 10000, 20000, 100000]
labels=['Low', 'Medium', 'High']
y_test_cat=pd.cut(y_test, bins=bins, labels=labels)
y_pred_cat=pd.cut(y_pred, bins=bins, labels=labels)
cr=classification_report(y_test_cat, y_pred_cat)
print(cr)

"""# **Final Prediction**"""

age=int(input("Enter age:"))
bmi=float(input("Enter BMI:"))
children=int(input("Enter number of children:"))
sex_input=input("Enter sex (male/female):").lower()
smoker_input=input("Enter smoker (yes/no):").lower()
region_input=input("Enter region (northeast/northwest/southeast/southwest):").lower()
sex=1 if sex_input == 'male' else 0
smoker=1 if smoker_input == 'yes' else 0
region_mapping={'northeast':0, 'northwest':1, 'southeast':2, 'southwest':3}
region=region_mapping[region_input]
predict_value=rf.predict([[age, sex, bmi, children, smoker, region]])
print(f"Predicted insurance charges: {predict_value[0]:.2f}")