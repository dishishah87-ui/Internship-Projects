# -*- coding: utf-8 -*-
"""Decision Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yB9a50V6GZ_8elzlON4w-nz6WV7cBPPc

**Import Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn import metrics
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from IPython.display import Image
from sklearn import tree
from os import system

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("iris.csv")

df.head()

df.shape

df.describe()

df.info()

for feature in df.columns:
  if df[feature].dtype==object:
    df[feature]=pd.Categorical(df[feature])
df.head()

print(df.sepal_length.value_counts())
print(df.sepal_width.value_counts())
print(df.petal_length.value_counts())
print(df.petal_width.value_counts())

replaceStruct={
    "species":{"setosa": 1,"versicolor": 2,"virginica": 3},
    "sepal_length":{"< 5.0": 1,"5.0 - 6.0": 2,"6.0 - 7.0": 3,"> 7.0": 4},
    "petal_length":{"< 2.0": 1,"2.0 - 4.0": 2,"4.0 - 6.0": 3,"> 6.0":4}
}
oneHotCols = ["species"]

df=df.replace(replaceStruct)
df=pd.get_dummies(df,columns=oneHotCols)
df.head()

df.info()

print(df.columns)

X = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']]
Y = df[['species_1', 'species_2', 'species_3']]

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=1)

dTree=DecisionTreeClassifier(criterion='gini',random_state=1)
dTree.fit(X_train,Y_train)

print(dTree.score(X_train,Y_train))
print(dTree.score(X_test,Y_test))

from sklearn import tree
import matplotlib.pyplot as plt
plt.figure(figsize=(12,8))
tree.plot_tree(dTree, filled=True, feature_names=X.columns)
plt.show()

dTreeR=DecisionTreeClassifier(criterion='gini',max_depth=3,random_state=1)
dTreeR.fit(X_train,Y_train)
print(dTreeR.score(X_train,Y_train))
print(dTreeR.score(X_test,Y_test))

train_char_label=['No','Yes']
Credit_Tree_FileR=open('credit_treeR.dot','w')
dot_data=tree.export_graphviz(dTreeR,out_file=Credit_Tree_FileR,feature_names=list(X_train),class_names=list(train_char_label))
Credit_Tree_FileR.close()
retCode=system("dot -Tpng credit_treeR.dot -o credit_treeR.png")
if(retCode>0):
  print("system command returning error:",+str(retCode))
else:
  display(Image("credit_treeR.png"))

print(pd.DataFrame(dTreeR.feature_importances_,columns=["Imp"],index=X_train.columns))

print(dTreeR.score(X_test,Y_test))
y_predict=dTreeR.predict(X_test)
from sklearn import metrics
if len(Y_test.shape) > 1 and Y_test.shape[1] > 1:
    Y_test_single = np.argmax(Y_test, axis=1)
else:
    Y_test_single = Y_test
y_predict = dTreeR.predict(X_test)
if len(y_predict.shape) > 1 and y_predict.shape[1] > 1:
    y_predict_single = np.argmax(y_predict, axis=1)
else:
    y_predict_single = y_predict
cm = metrics.confusion_matrix(Y_test_single, y_predict_single)
labels = np.unique(np.concatenate((Y_test_single, y_predict_single)))
df_cm = pd.DataFrame(cm, index=labels, columns=labels)
plt.figure(figsize=(7, 5))
sns.heatmap(df_cm, annot=True, fmt='g', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

if len(Y_train.shape) > 1 and Y_train.shape[1] > 1:
    Y_train = np.argmax(Y_train, axis=1)
if len(Y_test.shape) > 1 and Y_test.shape[1] > 1:
    Y_test = np.argmax(Y_test, axis=1)

from sklearn.ensemble import BaggingClassifier
bgcl = BaggingClassifier(estimator=dTree, n_estimators=50, random_state=1)
bgcl.fit(X_train, Y_train)

y_pred = bgcl.predict(X_test)
print("Training Accuracy:", bgcl.score(X_train, Y_train))
print("Testing Accuracy:", bgcl.score(X_test, Y_test))

from sklearn.metrics import classification_report, confusion_matrix
cm = confusion_matrix(Y_test, y_pred)
labels = np.unique(np.concatenate((Y_test, y_pred)))
df_cm = pd.DataFrame(cm, index=labels, columns=labels)
plt.figure(figsize=(7, 5))
sns.heatmap(df_cm, annot=True, fmt='g', cmap='Blues')
plt.title("Bagging Classifier - Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

print("\nClassification Report:")
print(classification_report(Y_test, y_pred))