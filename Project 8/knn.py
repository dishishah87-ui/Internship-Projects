# -*- coding: utf-8 -*-
"""KNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13sKaWGVLPlfg-lTe0VwYmrB7455OGG3z

#**Required Libraries**
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
import seaborn as sns
import  matplotlib.pyplot as plt
from scipy.stats import zscore
import warnings
warnings.filterwarnings("ignore")

from google.colab import files
uploaded = files.upload()

df=pd.read_csv("Ads.csv")

"""# **EDA**"""

df.head()

print("no. of rows:",df.shape[0],"\nno. of columns:",df.shape[1])

df.info()

df.isnull().sum()

df.drop("User ID",axis=1,inplace=True)
df = df.dropna()

cat=[]
num=[]
for i in df.columns:
  if df[i].dtypes=="object":
    cat.append(i)
  else:
    num.append(i)
print(cat)
print(num)

"""# **Data Preprocessing**"""

df[num].describe().T

df[cat].describe().T

dups=df.duplicated()
print("Number of duplicate rows:%d"%(dups.sum()))
df[dups]

for column in df.columns:
  if df[column].dtype=="object":
    print(column.upper(),':',df[column].nunique())
    print(df[column].value_counts().sort_values())

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))

sns.histplot(df['Age'], kde=True, ax=axes[0][0], color='skyblue')
axes[0][0].set_title("Age Distribution", fontsize=12)

sns.boxplot(y=df['Age'], ax=axes[0][1], color='lightgreen')
axes[0][1].set_title("Age Boxplot", fontsize=12)

sns.histplot(df['EstimatedSalary'], kde=True, ax=axes[1][0], color='salmon')
axes[1][0].set_title("Estimated Salary Distribution", fontsize=12)

sns.boxplot(y=df['EstimatedSalary'], ax=axes[1][1], color='khaki')
axes[1][1].set_title("Estimated Salary Boxplot", fontsize=12)
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))

sns.histplot(df['Age'], kde=True, bins=20, color='skyblue', ax=axes[0][0])
axes[0][0].set_title("Age Distribution", fontsize=12)

sns.boxplot(y=df['Age'], ax=axes[0][1], color='lightgreen')
axes[0][1].set_title("Age Boxplot", fontsize=12)

sns.histplot(df['EstimatedSalary'], kde=True, bins=20, color='salmon', ax=axes[1][0])
axes[1][0].set_title("Estimated Salary Distribution", fontsize=12)

sns.boxplot(y=df['EstimatedSalary'], ax=axes[1][1], color='khaki')
axes[1][1].set_title("Estimated Salary Boxplot", fontsize=12)

plt.tight_layout()
plt.show()

fig, axes = plt.subplots(nrows=4, ncols=2, figsize=(10, 20))
sns.histplot(df['Age'], kde=True, bins=20, color='skyblue', ax=axes[0][0])
axes[0][0].set_title("Age Distribution", fontsize=12)

sns.boxplot(y=df['Age'], ax=axes[0][1], color='lightgreen')
axes[0][1].set_title("Age Boxplot", fontsize=12)

sns.histplot(df['EstimatedSalary'], kde=True, bins=20, color='salmon', ax=axes[1][0])
axes[1][0].set_title("Estimated Salary Distribution", fontsize=12)

sns.boxplot(y=df['EstimatedSalary'], ax=axes[1][1], color='khaki')
axes[1][1].set_title("Estimated Salary Boxplot", fontsize=12)

sns.countplot(x='Gender', data=df, ax=axes[2][0], palette='pastel')
axes[2][0].set_title("Gender Distribution", fontsize=12)

sns.countplot(x='Gender', hue='Purchased', data=df, ax=axes[2][1], palette='coolwarm')
axes[2][1].set_title("Gender vs Purchased", fontsize=12)

sns.countplot(x='Purchased', data=df, ax=axes[3][0], palette='Set2')
axes[3][0].set_title("Purchased Count", fontsize=12)

sns.boxplot(x='Purchased', y='EstimatedSalary', data=df, ax=axes[3][1], palette='Pastel1')
axes[3][1].set_title("Salary by Purchase Status", fontsize=12)

plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 8))
sns.stripplot(x='Purchased', y='EstimatedSalary', data=df, jitter=True, palette='Set2')
plt.title("Purchased vs Estimated Salary", fontsize=12)
plt.show()

fig, axes = plt.subplots(nrows=4, ncols=1, figsize=(8, 20))

sns.stripplot(x='Gender', y='Age', data=df, jitter=True, palette='Set2', ax=axes[0])
axes[0].set_title("Gender vs Age", fontsize=12)
axes[0].set_xlabel("Gender")
axes[0].set_ylabel("Age")

sns.stripplot(x='Gender', y='EstimatedSalary', data=df, jitter=True, palette='Set3', ax=axes[1])
axes[1].set_title("Gender vs Estimated Salary", fontsize=12)
axes[1].set_xlabel("Gender")
axes[1].set_ylabel("Estimated Salary")

sns.stripplot(x='Purchased', y='Age', data=df, jitter=True, palette='coolwarm', ax=axes[2])
axes[2].set_title("Purchased vs Age", fontsize=12)
axes[2].set_xlabel("Purchased (0 = No, 1 = Yes)")
axes[2].set_ylabel("Age")

sns.stripplot(x='Purchased', y='EstimatedSalary', data=df, jitter=True, palette='husl', ax=axes[3])
axes[3].set_title("Purchased vs Estimated Salary", fontsize=12)
axes[3].set_xlabel("Purchased (0 = No, 1 = Yes)")
axes[3].set_ylabel("Estimated Salary")

plt.tight_layout()
plt.show()

sns.pairplot(df,hue="Purchased")

df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})
corr = df.corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr, annot=True, cmap='Blues', fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap - Social Network Ads Dataset", fontsize=14)
plt.show()

plt.figure(figsize=(10,10))
df[num].boxplot(vert=False)
plt.show()

df = pd.get_dummies(df, drop_first=True)

df.head()

X=df.drop('Purchased',axis=1)
Y=df['Purchased']

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.25,random_state=1)

"""**Gaussian Naive Bayes**"""

from sklearn.naive_bayes import GaussianNB
from sklearn import metrics

from sklearn.naive_bayes import GaussianNB
NB_model = GaussianNB()
NB_model.fit(X_train, Y_train)

NB_model = GaussianNB()
NB_model.fit(X_test, Y_test)

Y_train_predict=NB_model.predict(X_train)
model_score=NB_model.score(X_train,Y_train)
print(model_score)
print(metrics.confusion_matrix(Y_train,Y_train_predict))
print(metrics.classification_report(Y_train,Y_train_predict))

Y_test_predict=NB_model.predict(X_test)
model_score=NB_model.score(X_test,Y_test)
print(model_score)
print(metrics.confusion_matrix(Y_test,Y_test_predict))
print(metrics.classification_report(Y_test,Y_test_predict))

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
from sklearn import metrics
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
KNN_model = KNeighborsClassifier(n_neighbors=5)
KNN_model.fit(X_train_scaled,Y_train)
Y_test_predict = KNN_model.predict(X_test_scaled)
model_score = KNN_model.score(X_test_scaled, Y_test)
print("KNN Model Accuracy:", model_score)
print("\nConfusion Matrix:\n", metrics.confusion_matrix(Y_test, Y_test_predict))
print("\nClassification Report:\n", metrics.classification_report(Y_test, Y_test_predict))